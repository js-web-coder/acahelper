import { ContentValidation } from "@shared/schema";
import { z } from "zod";
import { fromZodError } from "zod-validation-error";

// Check environment variables
console.log("Checking for GEMINI_API_KEY in environment...");
const GEMINI_API_KEY = process.env.GEMINI_API_KEY || '';
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent";

// We'll validate the key when it's actually used rather than at startup

// Interface for Gemini API request
interface GeminiRequest {
  contents: {
    parts: {
      text: string;
    }[];
  }[];
  generationConfig: {
    temperature: number;
    topP: number;
    topK: number;
    maxOutputTokens: number;
  };
}

// Response type for Gemini API
interface GeminiResponse {
  candidates: {
    content: {
      parts: {
        text: string;
      }[];
    };
    finishReason: string;
    index: number;
  }[];
}

// Count words in a string
export function countWords(text: string): number {
  return text.trim().split(/\s+/).length;
}

// Helper function to build prompts
function buildPrompt(content: ContentValidation): string {
  const { text, contentType, tone, audience } = content;
  let prompt = '';

  // Common metadata to include
  const metadataStr = [
    tone ? `Tone: ${tone}` : '',
    audience ? `Target audience: ${audience}` : ''
  ].filter(Boolean).join(', ');

  const metadataSection = metadataStr ? ` with the following characteristics: ${metadataStr}` : '';

  switch (contentType) {
    case 'expand':
      prompt = `You are an expert educational content creator. Please expand the following educational content, adding more details, examples, and explanations${metadataSection}. Maintain the original meaning but make it more comprehensive:\n\n${text}`;
      break;
    case 'summarize':
      prompt = `You are an expert educational content creator. Please summarize the following educational content${metadataSection}. Create a concise summary that captures the key points:\n\n${text}`;
      break;
    case 'similar':
      prompt = `You are an expert educational content creator. Please generate a similar version of the following educational content${metadataSection}. It should convey the same information but be written in a different way:\n\n${text}`;
      break;
    default:
      throw new Error(`Unsupported content type: ${contentType}`);
  }

  return prompt;
}

// Main function to transform content using Gemini AI
export async function transformContent(content: ContentValidation): Promise<string> {
  try {
    // Validate content
    const validationResult = z.object({
      text: z.string().min(1, "Content is required"),
      contentType: z.enum(["expand", "summarize", "similar"]),
      tone: z.string().optional(),
      audience: z.string().optional(),
      aiParameters: z.object({
        temperature: z.number().min(0).max(1),
        topP: z.number().min(0).max(1),
        topK: z.number().min(1).max(100),
        maxOutputTokens: z.number().min(50).max(8192),
      }).optional(),
    }).safeParse(content);

    if (!validationResult.success) {
      throw new Error(fromZodError(validationResult.error).message);
    }

    // Build prompt for Gemini
    const prompt = buildPrompt(content);

    // Default AI parameters
    const defaultParams = {
      temperature: 0.7,
      topP: 0.8,
      topK: 40,
      maxOutputTokens: 2048,
    };

    // Use custom parameters if provided, otherwise use defaults
    const generationParams = content.aiParameters || defaultParams;

    // Create request for Gemini
    const geminiRequest: GeminiRequest = {
      contents: [
        {
          parts: [
            {
              text: prompt,
            },
          ],
        },
      ],
      generationConfig: {
        temperature: generationParams.temperature,
        topP: generationParams.topP,
        topK: generationParams.topK,
        maxOutputTokens: generationParams.maxOutputTokens,
      },
    };

    // Check if API key is available before making the request
    if (!GEMINI_API_KEY) {
      throw new Error("Gemini API key is not available. Please provide a valid API key in the environment variables.");
    }
    
    // Call Gemini API
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(geminiRequest),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Gemini API error: ${response.status} ${errorText}`);
    }

    const data = await response.json() as GeminiResponse;

    // Extract the generated text
    if (!data.candidates || data.candidates.length === 0) {
      throw new Error("No content generated by Gemini AI");
    }

    return data.candidates[0].content.parts[0].text;
  } catch (error) {
    console.error("Error transforming content:", error);
    throw error;
  }
}
